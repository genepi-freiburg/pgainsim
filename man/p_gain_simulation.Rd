% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgainsim.R
\name{p_gain_simulation}
\alias{p_gain_simulation}
\title{Random draw of recessive (and dominant) p-gains under no association.}
\usage{
p_gain_simulation(
  AFs,
  n = 100000L,
  snps_per_trait = 1L,
  n_study = 1000L,
  cores = 1L
)
}
\arguments{
\item{AFs}{Numeric vector of assumed allele frequencies.}

\item{n}{Integer. The number of random draws.}

\item{snps_per_trait}{Integer. The number of single nucleotide polymorphisms to be simulated per random draw of the trait (default = 1L). snps_per_trait can be increased for efficient simulation. By increasing snps_per_trait you are reducing the number of independent draws of the trait.}

\item{n_study}{Integer. The number of samples per simulation / study size (default = 1000L).}

\item{cores}{Integer. Amount of CPU cores used (<=1 : sequential)}
}
\value{
pgain_AF data frame. Each column describes simulated p-gain-values for the allele frequency, which is in the column name.
}
\description{
## hier kann man einen Beschreibung einfügen, hab jetzt erstmal die Kommentare aus dem Code gesammelt. Könntest du einen zusammenhängenden englsichen Text daraus machen? -> soll das ausführlicher sein?
To simulate recessive p-gains under no association traits are generated by random draws of a standard normally distributed sample of size n_study.
The genotype data is simulated in Hardy-Weinberg equilibrium (independently from trait data) as corrected Bernoulli distributed samples of size n_study with probability depending on the fixed allele frequencies AFs.
snps_per_trait defines the number of independent SNPs per trait.
The p-values of the additive, recessive and dominat model are computed by applying linear regression with the additive, recessive and dominant dosage respectively as independent variable on the simulated trait and genotype data.
Based on the p-values of the three different models the recessive p-gains are computed for every allele frequency of AFs.
}
\examples{
sim_data <- p_gain_simulation(AFs=c(0.1,0.5),n=10000L,snps_per_trait=1L,n_study=1000L,cores=2L)

}
